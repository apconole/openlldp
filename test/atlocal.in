# -*- shell-script -*-

MALLOC_PERTURB_=165; export MALLOC_PERTURB_

# Before glibc 2.11, the feature enabled by MALLOC_CHECK_ was not
# thread-safe.  See https://bugzilla.redhat.com/show_bug.cgi?id=585674 and
# in particular the patch attached there, which was applied to glibc CVS as
# "Restore locking in free_check." between 1.11 and 1.11.1.
lldpad=$abs_top_builddir/lldpad
glibc=`ldd $lldpad | sed -n 's/^  libc\.[^ ]* => \([^ ]*\) .*/\1/p'`
glibc_version=`$glibc | sed -n '1s/.*version \([0-9]\{1,\}\.[0-9]\{1,\}\).*/\1/p'`
case $glibc_version in
    2.[0-9] | 2.1[01]) mcheck=disabled ;;
    *) mcheck=enabled ;;
esac
if test $mcheck = enabled; then
    MALLOC_CHECK_=2; export MALLOC_CHECK_
else
    echo >&2 "glibc $glibc_version detected, disabling memory checking"
fi

# Look for a commnand in the system. If it is found, defines
# HAVE_COMMAND="yes", otherwise HAVE_COMMAND="no".
find_command()
{
    which $1 > /dev/null 2>&1
    status=$?
    var=HAVE_`echo "$1" | tr '[a-z]' '[A-Z]'`
    if test "$status" = "0"; then
        eval ${var}="yes"
    else
        eval ${var}="no"
    fi
}

# Set HAVE_NC
find_command nc

# Determine correct netcat option to quit on stdin EOF
if nc --version 2>&1 | grep -q nmap.org; then
    # Nmap netcat
    NC_EOF_OPT="--send-only -w 5"
else
    # BSD netcat
    NC_EOF_OPT="-q 1 -w 5"
fi

# Set HAVE_TCPDUMP
find_command tcpdump

# Add some default flags to make the tests run better under Address
# Sanitizer, if it was used for the build.
#
# We disable leak detection because otherwise minor leaks that don't
# matter break everything.
ASAN_OPTIONS=detect_leaks=0:abort_on_error=true:log_path=asan:$ASAN_OPTIONS
export ASAN_OPTIONS
